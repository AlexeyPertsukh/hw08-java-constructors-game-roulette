//–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä—É–ª–µ—Ç–∫–∏ —Å–º. Roulette.java

import java.util.Scanner;

public class Game {

    private Player[]    players;
    private Roulette    roulette;
    private double      moneyBalance;    //–¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å- –¥–æ—Ö–æ–¥ –∫–∞–∑–∏–Ω–æ –æ—Ç –∏–≥—Ä—ã

    private final int   MAX_PLAYERS = 10;
    private int         numPlayers;
    private int         numBots;
    private int         typeRoulette;

    Scanner sc;

    public Game(){
        sc = new Scanner(System.in);
    }

    //–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
    private boolean inputCmd(String str, Player player){
        boolean res = false;

        //–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        switch (str){
            case "?":
                help();
                res = true;
                break;
            case "$":
                player.printMoney();
                res = true;
                break;
            case "tab":
                roulette.printSmallTab();
                res = true;
            default:
                break;
        }

        if (res){
            return true;
        }

        //—á–∏—Ç—ã
        String cmd = My.getStrCmd(str);
        if(cmd != null) {
            switch (cmd) {
                case "+":
                    player.setMoney(100);
                    My.printlnColorBlue(";)");
                    res = true;
                    break;
                case "-":
                    player.setMoney(1);
                    My.printlnColorBlue(";)");
                    res = true;
                    break;
                default:
                    res = roulette.setSectorCheat(cmd);
                    break;
            }
        }

        return res;
    }

    public void help(){
        helpInputCmd();
        roulette.helpInputSector();
        roulette.helpInputBet();
        helpGit();

        System.out.println();
    }

    private void helpGit() {
        My.setTextColor(My.ANSI_BLUE);
        System.out.println();
        System.out.println("https://github.com/AlexeyPertsukh/hw08-java-constructors-game-roulette");
        My.resetTextColor();
    }

    //—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    public void helpInputCmd(){
        My.setTextColor(My.ANSI_BLUE);
        System.out.println("+++++");
        System.out.println("–ö–æ–º–∞–Ω–¥—ã:");
        System.out.println("? - —Å–ø—Ä–∞–≤–∫–∞");
        System.out.println("$ - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞");
        System.out.println("tab - –ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ");
        My.resetTextColor();
    }

    //–≤–≤–æ–¥ —Å–µ–∫—Ç–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
    private boolean inputSector(Player player){
        System.out.print("–°–µ–∫—Ç–æ—Ä: ");
        String str = player.nextSector(sc);

        if(inputCmd(str, player)){  //–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ - –≤—ã—Ö–æ–¥–∏–º
            return false;
        }

        if (str.compareToIgnoreCase("?") == 0)
        {
            roulette.helpInputSector();
            roulette.helpInputBet();
            System.out.println();
            return false;
        }

        if (!roulette.isCorrectSector(str))
        {
            My.printlnColorBlue("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–µ–∫—Ç–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
            return false;
        }

        player.setSector(str);

        return true;
    }

    //–≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏
    private boolean inputBet(Player player){
        System.out.print("–°—Ç–∞–≤–∫–∞ $: ");
        String str = player.nextBet(sc);


        if(inputCmd(str, player)){  //–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ - –≤—ã—Ö–æ–¥–∏–º
            return false;
        }

        if(!My.isDouble(str)){
            My.printlnColorBlue("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
            return false;
        }

        double bet = Double.parseDouble(str);


        //–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞?
        if(!Roulette.isCorrectBet(bet)){
            My.printlnColorBlue("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É.");
            My.printlnColorBlue("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞–≤–∫–∏: ");
            Roulette.printCorrectBets();
            return false;
        }

        //–¥–µ–Ω—å–≥–∏ –µ—Å—Ç—å?
        if (!player.setBet(bet)){
            My.setTextColor(My.ANSI_BLUE);
            System.out.printf("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏. –£ –≤–∞—Å –≤—Å–µ–≥–æ %.1f $  \n", player.getMoney());
            My.resetTextColor();
            return false;
        }

        return true;
    }

    //–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫–∏
    public void setBet(){
        boolean b;

        System.out.println("–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏, –≥–æ—Å–ø–æ–¥–∞! \n");
        for (Player player : players) {

            player.clearLastStat();
            //—É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –¥–µ–Ω–µ–≥? –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if(player.isLost()){
                continue;
            }

            System.out.printf("%s (%.1f $)    \n", player.getName(), player.getMoney() );
            System.out.println("-----------------");
            System.out.println("? - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏");

            //—Å—Ç–∞–≤–∫–∏
            do {
                b = inputBet(player);
            }while (!b);

            if(player.isBot()) {
                My.sleep(1000);
            }
            //—Å–µ–∫—Ç–æ—Ä
            do {
                b = inputSector(player);
            }while (!b);

            if(player.isBot()) {
                My.sleep(2000);
            }

            System.out.println();
        }
    }

    //–∏–≥—Ä–∞—Ç—å
    public void go() {

        My.printlnColorYellow  ("***************************************************");
        My.printlnColorYellow  ("SUPER CRAZY UNIVERSAL JAVA CONSOLE ROULETTE v1.6.21 ");
        My.printlnColorYellow  ("***************************************************");

        //–í–≤–æ–¥ —Ç–∏–ø–∞ —Ä—É–ª–µ—Ç–∫–∏

        for (int i = 0; i < Roulette.getNumTypes(); i++) {
            System.out.println((i + 1) + " - " + Roulette.getNameTypeNum(i));
        }

        do {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä—É–ª–µ—Ç–∫–∏: ");

             String str = sc.next();
             if(My.isInteger(str)){
                 typeRoulette = Integer.parseInt(str);
             }
        }while(typeRoulette < 1 || typeRoulette > Roulette.getNumTypes());

        //
        typeRoulette--;
        roulette = new Roulette(typeRoulette);

        do {
            System.out.printf("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (1-%d): ", MAX_PLAYERS);

            String str = sc.next();
            if(My.isInteger(str)){
                numPlayers = Integer.parseInt(str);
            }
        }while(numPlayers < 1 || numPlayers > MAX_PLAYERS);

        do {
            numBots = -1;
            System.out.printf("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ (0-%d): ", MAX_PLAYERS);

            String str = sc.next();
            if(My.isInteger(str)){
                numBots = Integer.parseInt(str);
            }
        }while(numBots < 0 || numBots > 10);

        players = new Player[numPlayers + numBots];

        for (int i = 0; i < numPlayers + numBots; i++) {
            players[i] = new Player("–ò–≥—Ä–æ–∫" + (i + 1));
            if(i >= numPlayers) {
                players[i] = new Bot("–ò–≥—Ä–æ–∫" + (i + 1));
            }
        }


        //
        boolean exit = false;
        do {
            //—Ä–∏—Å—É–µ–º –ø–æ–ª–µ
            System.out.println();
            roulette.printRouletteTable();
            System.out.println();

            //–¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫–∏
            setBet();
            //–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥
            goRound();

            if (playersLost()){    //–≤—Å–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏?
                System.out.println();
                My.printlnColorYellow("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏—Å—å –≤ –ø—É—Ö –∏ –ø—Ä–∞—Ö üíÄüíÄüíÄüíÄüíÄüíÄ");
                break;
            }
            System.out.println();
            System.out.println("*******************************");
            System.out.print("1 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É, 2 - –≤—ã—Ö–æ–¥: ");
            String strCmd = sc.next();
            if (strCmd.compareToIgnoreCase("2") == 0) {
                exit = true;
            }
        } while(!exit);
        My.printlnColorYellow("–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ –µ—â–µ.");
    }


    // –°—ã–≥—Ä–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–∑–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏
    private void goRound(){

     roulette.go();

     //–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
        for (Player player : players) {

            if (player.getBet() == 0) {
                continue;
            }

            double money = roulette.getWiningMoney(player.getBet(), player.getSector());
            player.addMoney(money);
            moneyBalance += (money * -1);   //–±–∞–ª–∞–Ω—Å –∏–≥—Ä—ã (–∫–∞–∑–∏–Ω–æ)
        }
        printResultTable(); //—Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
        System.out.printf("–ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: %6.1f $   \n", moneyBalance);

        //–≤—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        for (Player player : players) {
            if ((player.getBet()) != 0 && (player.isLost())) {
                My.printlnColorYellow(player.getName() + " –≤—Å—ë –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã üíÄüíÄüíÄüíÄüíÄüíÄ");
            }
        }
    }

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º- –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∏–ª–∏ –Ω–µ—Ç?
    public boolean  playersLost(){
        boolean lost = true;
        for (Player player : players) {
//             if (!players[i].isLost() && !players[i].getBotStatus()){
            if (!player.isLost()) {
                lost = false;
                break;
            }
        }
        return lost;
    }

    public void printResultTable(){

        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("   –ò–º—è                  –°—Ç–∞–≤–∫–∞         –°–µ–∫—Ç–æ—Ä                     –í—ã–∏–≥—Ä—ã—à     –ë–∞–ª–∞–Ω—Å  ");
        System.out.println("-------------------------------------------------------------------------------------");

        String nameSect = "";
        String sector = "";
        String strBet = "";
        String strWin = "";

        for (Player player : players) {
            if (player.getBet() > 0) {

                sector = String.format("%-10s", player.getSector().toUpperCase());
                nameSect = String.format("%-10s", roulette.getStrTypeSector(player.getSector()));
                strBet = String.format("%4.1f", player.getBet());
                strWin = String.format("%+4.1f", player.getLastAddMoney());
                strWin = String.format("%6s", strWin);


                System.out.printf("   %-19s %6s %20s %-12s  %8s  %8.1f   \n", player.getName(), strBet, sector, nameSect, strWin, player.getMoney());
            } else {
                String str = String.format("   %-19s %5s %14s %28s %10s  ", player.getName(), "üíÄ", "üíÄ", "üíÄ", "üíÄ");
                My.printlnColorYellow(str);
            }
            System.out.println("-------------------------------------------------------------------------------------");
        }

    }



}
